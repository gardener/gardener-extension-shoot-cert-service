#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o pipefail

PEBBLE_IMAGE=ghcr.io/letsencrypt/pebble:latest
PEBBLE_CERTIFICATE_VALIDITY=${PEBBLE_CERTIFICATE_VALIDITY:-7776000} # default validity 90 days

repo_root="$(readlink -f $(dirname ${0})/..)"
mkdir -p ${repo_root}/dev

export KUBECONFIG=$repo_root/gardener/example/provider-local/seed-operator/base/kubeconfig

create_certificate() {
  # generate certificate for ACME server
  current_dir=$PWD
  cd /tmp
  go run `go env GOROOT`/src/crypto/tls/generate_cert.go --host=acme.pebble.svc.cluster.local,acme.pebble.svc,acme,localhost --ecdsa-curve=P256
  cd $current_dir
  mv /tmp/cert.pem ${repo_root}/dev/pebble-cert.pem
  mv /tmp/key.pem ${repo_root}/dev/pebble-key.pem
}

if [ ! -f ${repo_root}/dev/pebble-cert.pem ]; then
  create_certificate
fi

echo "Generating ${repo_root}/example/shoot-cert-service/pebble/kustomization.yaml"

cat  << EOF > ${repo_root}/example/shoot-cert-service/pebble/kustomization.yaml
# DO NOT EDIT THIS FILE!
# This file is auto-generated by hack/pebble-up.sh.

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
- ../base

patches:
- path: extension-patch.yaml
- patch: |
    - op: replace
      path: /spec/deployment/extension/values/certificateConfig/caCertificates
      value: "$(cat ${repo_root}/dev/pebble-cert.pem | awk '{printf "%s\\n", $0}')"
    - op: replace
      path: /spec/deployment/extension/runtimeClusterValues/certificateConfig/caCertificates
      value: "$(cat ${repo_root}/dev/pebble-cert.pem | awk '{printf "%s\\n", $0}')"
    - op: replace
      path: /spec/deployment/extension/values/certificateConfig/inClusterACMEServerNamespaceMatchLabel
      value: {cert.gardener.cloud/cluster-acme-server: "true"}
    - op: replace
      path: /spec/deployment/extension/runtimeClusterValues/certificateConfig/inClusterACMEServerNamespaceMatchLabel
      value: {cert.gardener.cloud/cluster-acme-server: "true"}
    - op: replace
      path: /spec/deployment/extension/values/certificateConfig/defaultIssuer/acme/skipDNSChallengeValidation
      value: true
    - op: replace
      path: /spec/deployment/extension/runtimeClusterValues/certificateConfig/defaultIssuer/acme/skipDNSChallengeValidation
      value: true
  target:
    group: operator.gardener.cloud
    kind: Extension
    name: extension-shoot-cert-service
EOF

echo "Generating ${repo_root}/example/shoot-cert-service/pebble/extension-patch.yaml"

cat  << EOF > ${repo_root}/example/shoot-cert-service/pebble/extension-patch.yaml
# DO NOT EDIT THIS FILE!
# This file is auto-generated by hack/pebble-up.sh.

apiVersion: operator.gardener.cloud/v1alpha1
kind: Extension
metadata:
  name: extension-shoot-cert-service
spec:
  deployment:
    extension:
      runtimeClusterValues:
        certificateConfig:
          defaultIssuer:
            acme:
              server: https://acme.pebble.svc.cluster.local/dir
              email: some.user@gardener.cloud
      values:
        certificateConfig:
          defaultIssuer:
            acme:
              server: https://acme.pebble.svc.cluster.local/dir
              email: some.user@gardener.cloud
EOF

cat  << EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: pebble
  labels:
    cert.gardener.cloud/cluster-acme-server: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: pebble-cert
  namespace: pebble
  labels:
    app.kubernetes.io/name: pebble
type: kubernetes.io/tls
data:
  tls.crt: $(cat ${repo_root}/dev/pebble-cert.pem | base64 -w0)
  tls.key: $(cat ${repo_root}/dev/pebble-key.pem | base64 -w0)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pebble-config
  namespace: pebble
  labels:
    app.kubernetes.io/name: pebble
data:
  pebble-config.json: |
    {
       "pebble": {
          "certificate": "/etc/pebble/cert/tls.crt",
          "privateKey": "/etc/pebble/cert/tls.key",
          "listenAddress": ":8443",
          "managementListenAddress": ":8444",
          "certificateValidityPeriod": $PEBBLE_CERTIFICATE_VALIDITY
       }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pebble
  namespace: pebble
  labels:
    app.kubernetes.io/name: pebble
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pebble
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pebble
        cert.gardener.cloud/cluster-acme-server: "true"
    spec:
      terminationGracePeriodSeconds: 1
      containers:
        - name: pebble
          image: $PEBBLE_IMAGE
          volumeMounts:
            - name: pebble-config
              mountPath: /etc/pebble/config
            - name: pebble-cert
              mountPath: /etc/pebble/cert
          args:
            - -config
            - /etc/pebble/config/pebble-config.json
            - --dnsserver
            - 10.96.0.10:53
          env:
            ## ref: https://github.com/letsencrypt/pebble#testing-at-full-speed
            - name: PEBBLE_VA_NOSLEEP
              value: "1"
            ## Setting the environment variable PEBBLE_VA_ALWAYS_VALID to 1 makes the Pebble server always return a valid response for the validation authority.
            - name: PEBBLE_VA_ALWAYS_VALID
              value: "1"
          ports:
            - name: acme
              containerPort: 8443
            - name: acme-mgmt
              containerPort: 8444
          startupProbe:
            periodSeconds: 1
            httpGet:
              path: /dir
              port: acme
              scheme: HTTPS
      volumes:
        - name: pebble-config
          configMap:
            name: pebble-config
        - name: pebble-cert
          secret:
            secretName: pebble-cert
---
apiVersion: v1
kind: Service
metadata:
  name: acme
  namespace: pebble
  labels:
    app.kubernetes.io/name: pebble
spec:
  selector:
    app.kubernetes.io/name: pebble
  ports:
    - name: acme
      targetPort: acme
      port: 443
    - name: acme-alternative
      targetPort: acme
      port: 5443
---
apiVersion: v1
kind: Service
metadata:
  name: acme-mgmt
  namespace: pebble
  labels:
    app.kubernetes.io/name: pebble
spec:
  selector:
    app.kubernetes.io/name: pebble
  ports:
    - name: acme-mgmt
      targetPort: acme-mgmt
      port: 8444
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-pebble-ingress
  namespace: pebble
spec:
  ingress:
  - {}
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pebble
  policyTypes:
  - Ingress
EOF